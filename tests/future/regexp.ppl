{- Match a regular expression against a string.

   See issue #44. -}

data Symbol = A | B;
data String = Nil | Cons Symbol String;
data Regexp = Atom Symbol | Union Regexp Regexp | Concat Regexp Regexp | Star Regexp;

-- Match re against a prefix of w and return the rest
define match' = \re. \w.
  case re of
    Atom a -> (case w of Nil -> fail | Cons b w -> if a == b then w else fail)
  | Union re1 re2 -> amb (match' re1 w) (match' re2 w)
  | Concat re1 re2 -> let w' = match' re1 w in match' re2 w'
  | Star re1 -> let w' = match' re1 w in match' (Star re1) w';

-- Match re against w
define match = \re. \w. case match' re w of Nil -> () | Cons _ _ -> fail;

match (Star (Concat (Atom A) (Atom B))) (Cons A (Cons B (Cons A (Cons B Nil))))
